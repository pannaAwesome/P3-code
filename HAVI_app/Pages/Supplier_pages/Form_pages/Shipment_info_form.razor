@layout HAVI_app.Shared.Supplier_layout.Form_layout
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@page "/shipment_info_form"
@inherits HAVI_app.Classes.Validation
@inject Models.ArticleInformation Article
@inject HAVI_app.Services.Classes.LocationService LocationService


<HAVI_app.Shared.Supplier_layout.Form_header SupplierState="filled" ArticleState="filled" MeasurementState="filled" ShipmentState="active" Id="Article.Id" />
<div class="row justify-content-center">
    <div class="col-10">
        <h3>Shipment information:</h3>
        <p class="form-header-supplier">Fill out information regarding the shipment of the article</p>
    </div>
</div>

<div class="justify-content-center row">
    <div class="col-10 d-flex justify-content-center">
        <EditForm OnSubmit="@ValidationShipmentInfo">
            <table class="table">

                <tr>
                    <td>
                        <label for="carton_pr_pallet" class="required">Cartons per pallet:</label>
                    </td>
                    <td colspan="6">
                        <input type="number" class="form-control @CartonPrPalletValidated" @onfocus="@(() => CartonPrPalletValidated = "")" name="carton_pr_pallet" @bind="Article.CartonsPerPallet" required maxlength="10">
                    </td>
                    <td>
                        <HAVI_app.Shared.Shared_layout.Questionmark_top>
                            Enter the amount of cartons one pallet can have. Must not be zero or less
                        </HAVI_app.Shared.Shared_layout.Questionmark_top>

                    </td>
                </tr>

                <tr>
                    <td>
                        <label for="carton_pr_layer" class="required">Cartons per layer:</label>
                    </td>
                    <td colspan="6">
                        <input type="number" class="form-control @CartonPrLayerValidated" @onfocus="@(() => CartonPrLayerValidated = "")" name="carton_pr_layer" @bind="Article.CartonsPerLayer" required maxlength="8">
                    </td>
                    <td>
                        <HAVI_app.Shared.Shared_layout.Questionmark_top>
                            Enter the amount of cartons per layer. Must not be zero or less
                        </HAVI_app.Shared.Shared_layout.Questionmark_top>

                    </td>
                </tr>

                <tr>
                    <td>
                        <label for="country_origin" class="required">Country of origin:</label>
                    </td>
                    <td colspan="6">
                        <select class="form-control @CountryOfOriginValidated" @onfocus="@(() => CountryOfOriginValidated = "")" @bind="@Article.CountryOfOrigin" name="county_origin" required>
                            <option>-- select or search for an option --</option>
                                @foreach (var item in contries)
                                {
                                    <option>@item.Country</option>
                                }
                        </select>
                    </td>
                    <td>
                        <HAVI_app.Shared.Shared_layout.Questionmark_top>
                            Select where the article was manufactured
                        </HAVI_app.Shared.Shared_layout.Questionmark_top>

                    </td>
                </tr>

                <tr>
                    <td>
                        <label for="imported_from" class="required ">Imported from:</label>
                    </td>
                    <td colspan="6">
                        <select class="form-control @ImportedFromValidated" @onfocus="@(() => ImportedFromValidated = "")" @bind="@Article.ImportedFrom" name="imported_from" required>
                            <option>-- select or search for an option --</option>
                                @foreach (var item in contries)
                                {
                                    <option>@item.Country</option>
                                }
                        </select>
                    </td>
                    <td>
                        <HAVI_app.Shared.Shared_layout.Questionmark_top>
                            Select where the product is shipped from
                        </HAVI_app.Shared.Shared_layout.Questionmark_top>

                    </td>
                </tr>

                <tr>
                    <td>
                        <label for="toll_tarrif_no" class="required">Toll-tarrif no.:</label>
                    </td>
                    <td colspan="6">
                        <input type="text" class="form-control @TollTarrifNoValidated" @onfocus="@(() => TollTarrifNoValidated = "")" name="toll_tarrif_no" @bind="Article.TollTarifNumber" required maxlength="16">
                    </td>
                    <td>
                        <HAVI_app.Shared.Shared_layout.Questionmark_top>
                            Find information about the Toll-tarif number here: 
                            <a href="https://skat.dk/skat.aspx?oid=2247456" target="_blank">Click here</a>
                        </HAVI_app.Shared.Shared_layout.Questionmark_top>

                    </td>
                </tr>

                <tr>
                    <td>
                        <label for="minimum_order_quantity" class="required">Minimum order quantity:</label>
                    </td>
                    <td colspan="6">
                        <input type="number" class="form-control @MinimumOrderQuantityValidated" @onfocus="@(() => MinimumOrderQuantityValidated = "")" name="minimum_order_quantity" @bind="Article.MinimumOrderQuantity" required maxlength="10">
                    </td>
                    <td>
                        <HAVI_app.Shared.Shared_layout.Questionmark_top>
                            Enter minimum amount of units to order. Must not be zero or less
                        </HAVI_app.Shared.Shared_layout.Questionmark_top>

                    </td>
                </tr>

                <tr>
                    <td>
                        <label for="temprature_during_transportation" class="required">Temperature during transportation:</label>
                    </td>
                    <td>
                        <label class="center-for-units" for="min">Min:</label>
                    </td>
                    <td>
                        <input type="number" class="form-control @MinTempratureDuringTransportationValidated" @onfocus="@(() => MinTempratureDuringTransportationValidated = "")" name="min" @bind="Article.TemperatureTransportationMin" required maxlength="31">
                    </td>
                    <td>
                        <label class="center-for-units" for="degrees">&#8451;</label>
                    </td>
                    <td>
                        <label class="center-for-units" for="max">Max:</label>
                    </td>
                    <td>
                        <input type="number" class="form-control @MaxTempratureDuringTransportationValidated" @onfocus="@(() => MaxTempratureDuringTransportationValidated = "")" name="max" @bind="@Article.TemperatureTransportationMax" required maxlength="31">
                    </td>
                    <td>
                        <label class="center-for-units" for="degrees">&#8451;</label>
                    </td>
                    <td>
                        <HAVI_app.Shared.Shared_layout.Questionmark_top>
                            Enter minimum and maximum temperature during transport
                        </HAVI_app.Shared.Shared_layout.Questionmark_top>

                    </td>
                </tr>

                <tr>
                    <td>
                        <label for="temprature_storage" class="required">Storage temperature requirements:</label>
                    </td>
                    <td>
                        <label class="center-for-units" for="min">Min:</label>
                    </td>
                    <td>
                        <input type="number" class="form-control @MinTemperatureStorageValdiated" @onfocus="@(() => MinTemperatureStorageValdiated = "")" name="min" @bind="Article.TemperatureStorageMin" required maxlength="31">
                    </td>
                    <td>
                        <label class="center-for-units" for="degrees">&#8451;</label>
                    </td>
                    <td>
                        <label class="center-for-units" for="max">Max:</label>
                    </td>
                    <td>
                        <input type="number" class="form-control @MaxTemperatureStorageValidated" @onfocus="@(() => MaxTemperatureStorageValidated = "")" name="max" @bind="@Article.TemperatureStorageMax" required maxlength="31">
                    </td>
                    <td>
                        <label class="center-for-units" for="degrees">&#8451;</label>
                    </td>
                    <td>
                        <HAVI_app.Shared.Shared_layout.Questionmark_top>
                            At what temperature should the article be stored
                        </HAVI_app.Shared.Shared_layout.Questionmark_top>

                    </td>
                </tr>

                <tr>
                    <td>
                        <label for="lead_time" class="required">Lead time:</label>
                    </td>
                    <td colspan="5">
                        <input type="number" class="form-control @LeadTimeValidated" @onfocus="@(() => LeadTimeValidated = "")" name="lead_time" @bind="Article.LeadTime" required maxlength="4">
                    </td>
                    <td>
                        <label class="center-for-units" for="lead_time">days</label>
                    </td>
                    <td>
                        <HAVI_app.Shared.Shared_layout.Questionmark_top>
                            Enter the amount of time in days from order initiation until it is delivered. Must not be zero or less
                        </HAVI_app.Shared.Shared_layout.Questionmark_top>
                    </td>
                </tr>
            </table>

            <div class="row justify-content-center">
                <div class="text-right col-6">
                    <input type="button" class="btn cancel-button button-size" value="Back" @onclick="OnPostBack" />
                </div>
                <div class="text-left col-6">
                    <input type="submit" class="btn green-button button-size" value="Next" />
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {

    List<Location> contries = new List<Location>();

    public string CartonPrPalletValidated;
    public string CartonPrLayerValidated;
    public string CountryOfOriginValidated;
    public string ImportedFromValidated;
    public string TollTarrifNoValidated;
    public string MinimumOrderQuantityValidated;
    public string MinTempratureDuringTransportationValidated;
    public string MaxTempratureDuringTransportationValidated;
    public string MinTemperatureStorageValdiated;
    public string MaxTemperatureStorageValidated;
    public string LeadTimeValidated;

    public void ValidationShipmentInfo()
    {
        if ((!IntOnly(Article.CartonsPerPallet)) || (!MustNotBeZeroOrNegativeNumbere(Article.CartonsPerPallet)))
        {
            CartonPrPalletValidated = "btn-danger";
        }
        if ((!IntOnly(Article.CartonsPerLayer)) || (!MustNotBeZeroOrNegativeNumbere(Article.CartonsPerLayer)))
        {
            CartonPrLayerValidated = "btn-danger";
        }
        if ((!NumbersLettersDashOnly(Article.TollTarifNumber)))
        {
            TollTarrifNoValidated = "btn-danger";
        }
        if ((!DoubleOnly(Article.MinimumOrderQuantity)) || (!MustNotBeZeroOrNegativeNumbere(Article.MinimumOrderQuantity)))
        {
            MinimumOrderQuantityValidated = "btn-danger";
        }
        if (!DoubleOnly(Article.TemperatureTransportationMin))
        {
            MinTempratureDuringTransportationValidated = "btn-danger";
        }
        if (!DoubleOnly(Article.TemperatureTransportationMax))
        {
            MaxTempratureDuringTransportationValidated = "btn-danger";
        }
        if (!DoubleOnly(Article.TemperatureStorageMin))
        {
            MinTemperatureStorageValdiated = "btn-danger";
        }
        if (!DoubleOnly(Article.TemperatureStorageMax))
        {
            MaxTemperatureStorageValidated = "btn-danger";
        }
        if ((!IntOnly(Article.LeadTime)) || (!MustNotBeZeroOrNegativeNumbere(Article.LeadTime)))
        {
            LeadTimeValidated = "btn-danger";
        }

        if(Article.CountryOfOrigin == "-- select or search for an option --")
        {
            CountryOfOriginValidated = "btn-danger";
        }

        if(Article.ImportedFrom == "-- select or search for an option --")
        {
            ImportedFromValidated = "btn-danger";
        }

        if (IntOnly(Article.CartonsPerPallet) && MustNotBeZeroOrNegativeNumbere(Article.CartonsPerPallet) &&
            IntOnly(Article.CartonsPerLayer) && MustNotBeZeroOrNegativeNumbere(Article.CartonsPerLayer) &&
            NumbersLettersDashOnly(Article.TollTarifNumber) &&
            DoubleOnly(Article.MinimumOrderQuantity) && MustNotBeZeroOrNegativeNumbere(Article.MinimumOrderQuantity) &&
            DoubleOnly(Article.TemperatureTransportationMin) &&
            DoubleOnly(Article.TemperatureTransportationMax) &&
            DoubleOnly(Article.TemperatureStorageMin) &&
            DoubleOnly(Article.TemperatureStorageMax) &&
            IntOnly(Article.LeadTime) && MustNotBeZeroOrNegativeNumbere(Article.LeadTime) &&
            Article.CountryOfOrigin != "-- select or search for an option --" &&
            Article.ImportedFrom != "-- select or search for an option --")
        {
            NavigationManager.NavigateTo($"/price_info_form", true);
        }
    }

    public void OnPostBack()
    {
        NavigationManager.NavigateTo($"/measurement_info_form", true);
    }

    void RemoveClassDanger()
    {
        TollTarrifNoValidated = "";
    }

    protected override async Task OnInitializedAsync()
    {
        contries = await LocationService.GetLocations();
    }
}
