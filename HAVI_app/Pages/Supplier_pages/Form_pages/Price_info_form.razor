@layout HAVI_app.Shared.Supplier_layout.Form_layout
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@page "/price_info_form"
@inherits HAVI_app.Classes.Validation
@inject Models.ArticleInformation Article
@inject HAVI_app.Services.Classes.SetCurrencyService SetCurrencyService
@inject HAVI_app.Services.Classes.InformCostTypeService InformCostTypeService

<HAVI_app.Shared.Supplier_layout.Form_header SupplierState="filled" ArticleState="filled" MeasurementState="filled" ShipmentState="filled" PriceState="active" Id="Article.Id" />

<div class="row justify-content-center">
    <div class="col-10">
        <h3>Price information:</h3>
        <p class="form-header-supplier">Fill out information regarding the article price:</p>
    </div>
</div>


<div class="justify-content-center row">
    <div class="col-10 d-flex justify-content-center">
        <EditForm Model="Article" OnSubmit="@OnPostForward">
            <table class="table">

                <tr>
                    <td>
                        <label for="set_currency" class="required">Set currency:</label>
                    </td>
                    <td colspan="4">
                        <select class="form-control" name="set_currency" @onchange="@((ChangeEventArgs __e) => Article.SetCurrency = __e.Value.ToString())" required>
                            <option disabled selected>-- select or search for an option --</option>
                            @foreach (var item in contries)
                            {
                                <option>@item.CurrencyName</option>
                            }
                        </select>
                    </td>
                    <td>
                        <HAVI_app.Shared.Shared_layout.Questionmark_top>
                            Choose your favored currency
                        </HAVI_app.Shared.Shared_layout.Questionmark_top>

                    </td>
                </tr>

                <tr>
                    <td>
                        <label for="purchase_price" class="required">Purchase price:</label>
                    </td>
                    <td colspan="4">
                        <input type="number" class="form-control @PurchasePriceValidated" name="purchase_price" @bind="Article.PurchasePrice" required maxlength="10">
                    </td>
                    <td>
                        <HAVI_app.Shared.Shared_layout.Questionmark_top>
                            Insert the price of the article you and HAVI has agreed upon. This must not be zero or less
                        </HAVI_app.Shared.Shared_layout.Questionmark_top>

                    </td>
                </tr>

                <tr>
                    <td>
                        <label for="other_cost" class="required" value="@CostRegardingArticle">Other cost regarding the article? </label>
                    </td>

                    <td colspan="4">
                        <div class="text-center">
                            <input type="radio" name="organic" value="yes" @onclick="() => { Article.OtherCosts = 1; AddExtraCosts(); }" required>
                            <label for="yes">Yes</label>
                            &nbsp;
                            <input type="radio" name="organic" value="no" @onclick="() => Article.OtherCosts = 0" />
                            <label for="no">No</label>
                        </div>
                    </td>
                    <td>
                        <HAVI_app.Shared.Shared_layout.Questionmark_top>
                            Select yes to add information about taxes and duties
                        </HAVI_app.Shared.Shared_layout.Questionmark_top>

                    </td>
                </tr>
            </table>
            @if (Article.OtherCosts == 1)
            {
                <table>
                    @for (int i = 0; i < NumberOfOtherCosts; i++)
                    {
                        <tr>
                            <td>
                                <label for="afgift-@i">Inform cost type:</label>
                            </td>

                            <td>
                                <select class="form-control" name="afgift-@i" @onchange="@((ChangeEventArgs __e) => Article.OtherCostsForArticles[i].InformCostType = __e.Value.ToString())" required>
                                    <option disabled selected>-- select an option --</option>
                                    @foreach (InformCostType item in costType)
                                    {
                                        <option>@item.CostType</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <label for="amount-@i">Amount in @Article.SetCurrency:</label>
                            </td>
                            <td>
                                <input type="number" class="form-control" name="amount-@i" @bind="Article.OtherCostsForArticles[i].Amount" required maxlength="10">
                            </td>
                            @if (i == NumberOfOtherCosts)
                            {
                                <td @onclick="AddExtraCosts"> &#10133; </td>
                                @if (NumberOfOtherCosts != 1)
                                {
                                    <td @onclick="RemoveExtraCosts"> &#10134;</td>
                                }
                            }
                        </tr>
                    }
                </table>
            }
            <div class="row justify-content-center">
                <div class="text-right col-6">
                    <input type="button" class="btn cancel-button button-size" value="Back" @onclick="OnPostBack" />
                </div>
                <div class="text-left col-6">
                    <input type="submit" class="btn green-button button-size" value="Next" />
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    public string SetCurrency { get; set; }

    public int PurchasePrice { get; set; }

    public string PurchasePriceValidated { get; set; }

    public int AmountInCurrency { get; set; }

    public string CostRegardingArticle { get; set; }

    public string CostType { get; set; }

    public int TotalAmount = 0;

    public int NumberOfOtherCosts { get; set; } = 0;

    List<SetCurrency> contries = new List<SetCurrency>();
    List<InformCostType> costType = new List<InformCostType>();


    public void OnPostForward()
    {
        if (MustNotBeZeroOrNegativeNumbere(Article.PurchasePrice))
        {
            NavigationManager.NavigateTo($"/confirm_details", true);
        }

        if (!MustNotBeZeroOrNegativeNumbere(Article.PurchasePrice))
        {
             PurchasePriceValidated = "btn-danger";
        }
    }

    public void OnPostBack()
    {
        NavigationManager.NavigateTo($"/shipment_info_form", true);
    }

    protected override async Task OnInitializedAsync()
    {
        Article.OtherCostsForArticles = new List<OtherCostsForArticle>();
        contries = await SetCurrencyService.GetSetCurrencies();
        costType = await InformCostTypeService.GetInformCostTypes();
    }


    private void AddExtraCosts()
    {
        Article.OtherCostsForArticles.Add(new OtherCostsForArticle() { Id = 0 });
        NumberOfOtherCosts++;
    }

    private void RemoveExtraCosts()
    {
        int numberLast = Article.OtherCostsForArticles.Count - 1;
        OtherCostsForArticle last = Article.OtherCostsForArticles.ElementAt(numberLast);
        Article.OtherCostsForArticles.Remove(last);
        NumberOfOtherCosts--;
    }
}